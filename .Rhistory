plot(log(pval.seq))
abline(h = log(alpha.star))
abline(h = log(alpha), lty = 2)
sum(pval.seq < alpha)
sum(pval.seq < alpha.star)
knitr::opts_chunk$set(echo = TRUE)
m = nrow(golub)
library(multtest)
data(golub)
gol.factor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
var.test(golub[1,] ~ gol.factor)
n1 = sum(gol.factor == "ALL")
n2 = sum(gol.factor == "AML")
density_func = function(x) {
df(x, df1=n1-1, df2=n2-1)
}
curve(density_func, 0, 3)
# Function to return the F-test p-value
f_test_function = function(x) {
var.test(x ~ gol.factor, conf.level=0.95)$p.value
}
# How to test a single gene
f_test_function(golub[1,])
# Test for all genes
p_vals = apply(golub, 1, f_test_function)
sum(p_vals < 0.05)
m = nrow(golub)
pvals_bonferroni = p_vals * m
sum(pvals_bonferroni < 0.05)
knitr::opts_chunk$set(echo = TRUE)
m = nrow(golub)
pvals_bonferroni = p_vals * m
sum(pvals_bonferroni < 0.05)
knitr::opts_chunk$set(echo = TRUE)
m = nrow(golub)
pvals_sidek = 1 - (1 - pvals)^m
knitr::opts_chunk$set(echo = TRUE)
m = nrow(golub)
pvals_sidek = 1 - (1 - p_vals)^m
sum(pvals_sidek < 0.05)
knitr::opts_chunk$set(echo = TRUE)
library(genetics)
path = "http://www.biostat.umn.edu/~cavanr/FMS_data.txt"
fms = read.delim(path, header = TRUE, sep = "\t")
attach(fms)
lm.fit = lm(NDRM.CH ~ actn3_r577x + Gender)
summary(lm.fit)
fms$names
fms
-23.472 + c(-1, 1) * qt(0.975, df = 599) * 2.565
confint(lm.fit)
lm.fit2 = lm(NDRM.CH ~ actn3_r577x + Gender + actn3_r577x:Gender)
anova(lm.fit, lm.fit2)
knitr::opts_chunk$set(echo = TRUE)
library(multtest)
data(golub)
gol.fac = factor(golub.cl, levels = 0:1, labels = c("ALL", "AML"))
golub
golub.cl
gol.fac
var.test(golub[1, ] ~ gol.fac)
n1 = sum(gol.fac == "ALL") # sample sizes for the two groups
n2 = sum(fol.fac == "AML")
n1 = sum(gol.fac == "ALL") # sample sizes for the two groups
n2 = sum(gol.fac == "AML")
f = function(x) { # density function
df(x, df1 = n1 - 1, df2 = n2 - 1)
}
curve(f, 0, 3)
# Function to return the F-test p-value:
f.test.fun = function(x) {
var.test(x ~ gol.fac, conf.level=0.095)$p.value
}
# How to test a single gene:
f.test.fun(golub[1, ])
# Run the rest for all genes:
pvals = apply(golub, 1, f.test.fun)
sum(pvals < 0.05)
m = nrow(golub)
pvals.bonf = pvals * m
sum(pvals.bonf < 0.05)
m = nrow(golub)
pvals.sidek = 1 - ( 1 - pvals)^m
sum(pvals.sidek < 0.05)
plot(sort(pvals)[1:400], xlab="Genes forted by p-value", ylab="p-values")
abline(0, 0.05/m, lty=2, col=2) # BH
abline(h = 0.05/m, lty=3, col=3) # Bonferroni
abline(h = 1-(1-0.5)^(1/m), lty=4, col=4) # Sidek
pvals.BH = sort(pvals, decreasing = FALSE) * m / seq(1, m)
sum(pvals.BH < 0.05)
plot(sort(pvals)[1:400], xlab="Genes forted by p-value", ylab="p-values")
abline(0, 0.05/m, lty=2, col=2) # BH
abline(h = 0.05/m, lty=3, col=3) # Bonferroni
abline(h = 1-(1-0.5)^(1/m), lty=4, col=4) # Sidek
var.test(golub[1, ] ~ gol.fac)
gol.fac = factor(golub.cl, levels = 0:1, labels = c("ALL", "AML"))
table(gol.fac)
library(genetics)
library(coin)
path <- "http://www.biostat.umn.edu/~cavanr/FMS_data.txt"
fms <- read.delim(path, header = TRUE, sep = "\t")
trait <- as.numeric(fms$pre.BMI > 25)
pvals <- numeric(225)
for (i in 1:225) {
mysnp <- ordered(fms[, i + 1])
pvals[i] <- pvalue(independence_test(trait ~ mysnp)) }
# No p-value adjustment.
table(pvals < 0.05)
# Bonferroni.
table(pvals < 0.05 / 225)
# Sidek.
table(pvals < 1 - (1 - 0.05)^(1 / 225))
# Benjamini-Hochberg.
table(sort(pvals, na.last = TRUE) * 225 / (1:225) < 0.05)
table(sort(pvals) * 225 / (1:225) < 0.05)
knitr::opts_chunk$set(echo = TRUE)
library(genetics)
path = "http://www.biostat.umn.edu/~cavanr/FMS_data.txt"
fms = read.delim(path, header = TRUE, sep = "\t")
attach(fms)
lm.fit = lm(NDRM.CH ~ actn3_r577x + Gender)
summary(lm.fit)
fms
NDRM.CH
-23.472 + c(-1, 1) * qt(0.975, df = 599) * 2.565
confint(lm.fit)
lm.fit2 = lm(NDRM.CH ~ actn3_r577x + Gender + actn3_r577x:Gender)
anova(lm.fit, lm.fit2)
plot(fitted(lm.fit2), residuals(lm.fit2))
abline(h=0, lty=2)
qqnorm(residuals(lm.fit2))
qqline(residuals(lm.fit2))
library(multtest)
data(golub)
library(multtest)
data(golub)
knitr::opts_chunk$set(echo = TRUE)
gol.fac = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
n1 = summary(gol.fac)[1] # ALL
n2 = summary(gol.fac)[2] # AML
n = n1 + n2
m = 10      # number of genes to test
X = golub[1:m, ] # original data
# Center the two samples
muALL = rowmeans(X[, gol.fac=="ALL"])
gol.fac = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
n1 = summary(gol.fac)[1] # ALL
n2 = summary(gol.fac)[2] # AML
n = n1 + n2
m = 10      # number of genes to test
X = golub[1:m, ] # original data
# Center the two samples
muALL = rowMeans(X[, gol.fac=="ALL"])
muAML = rowMeans(X[, gol.fac=="AML"])
Y <- X
Y[, gol.fac=="ALL"] <- Y[, gol.fac=="ALL"] - matrix(muALL, m, n1, byrow=FALSE)
Y[, gol.fac=="AML"] <- Y[, gol.fac=="AML"] - matrix(muAML, m, n2, byrow=FALSE)
B = 250    # number of bootstrap samples
F.mat = matrix(nrow=B, ncol=m) # initialise matrix of bootstrapped statistics
for (b in 1:B) {
indices = sample(1:n, n, replace=TRUE) # indices for the bootstrapped samples
f.test.fun = function(x) {
var.test(x ~gol.fac, conf.level=0.95)$statistic
}
F.mat[b, ] = apply(Y[indices], 1, f.test.fun)
}
gol.fac = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
n1 = summary(gol.fac)[1] # ALL
n2 = summary(gol.fac)[2] # AML
n = n1 + n2
m = 10      # number of genes to test
X = golub[1:m, ] # original data
# Center the two samples
muALL = rowMeans(X[, gol.fac=="ALL"])
muAML = rowMeans(X[, gol.fac=="AML"])
Y <- X
Y[, gol.fac=="ALL"] <- Y[, gol.fac=="ALL"] - matrix(muALL, m, n1, byrow=FALSE)
Y[, gol.fac=="AML"] <- Y[, gol.fac=="AML"] - matrix(muAML, m, n2, byrow=FALSE)
B = 250    # number of bootstrap samples
F.mat = matrix(nrow=B, ncol=m) # initialise matrix of bootstrapped statistics
for (b in 1:B) {
indices = sample(1:n, n, replace = TRUE)
f.test.fun = function(x) {
var.test(x ~ gol.fac, conf.level = 0.95)$statistic
}
F.mat[b, ] = apply(Y[, indices], 1, f.test.fun)
}
F.mat
D = data.frame(F.mat)[,1:5]
colnames(D) = golub.gnames[1:5,3]
plot(log(D))
library(MASS)
f.hat = kde2d(log(F.mat[, 4]), log(F.mat[, 5]))
persp(f.hat, theta = 40, phi = 25, shade = 0.5, ticktype = "detailed",
xlab = golub.gnames[1, 3],
ylab = golub.gnames[2, 3],
zlab = "density estimate")
contour(f.hat, xlab = golub.gnames[1,3], ylab = golub.gnames[2,3])
c = 0.5 # initial value
alpha = 0.025 # target FWER
alpha.c = 1 # initial value for the estimated FWER
while (alpha.c > alpha) {
c =c+0.001
rs = rowSums(F.mat > c) # for each sample, count how many reject H0 alpha.c = mean(rs >= 1)
}
c
c = 0.5 # initial value
alpha = 0.025 # target FWER
alpha.c = 1 # initial value for the estimated FWER
while (alpha.c > alpha) {
c =c+0.001
rs = rowSums(F.mat > c) # for each sample, count how many reject H0
alpha.c = mean(rs >= 1)
}
c # the determined critical value
c=1
alpha = 0.025
alpha.c = 1
while (alpha.c > alpha) {
c =c-0.001
ls = rowSums(F.mat < c) # for each sample, count how many reject H0
alpha.c = mean(ls >= 1)
}
c # the determined critical value
?confint
confint(lm.fit2)
library(genetics)
path = "http://www.biostat.umn.edu/~cavanr/FMS_data.txt"
fms = read.delim(path, header = TRUE, sep = "\t")
attach(fms)
lm.fit = lm(NDRM.CH ~ actn3_r577x + Gender)
summary(lm.fit)
-23.472 + c(-1, 1) * qt(0.975, df = 599) * 2.565
confint(lm.fit)
plot(fitted(lm.fit2), residuals(lm.fit2))
gol.fac = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
n1 = summary(gol.fac)[1] # ALL
n2 = summary(gol.fac)[2] # AML
n = n1 + n2
m = 10      # number of genes to test
X = golub[1:m, ] # original data
# Center the two samples
muALL = rowMeans(X[, gol.fac=="ALL"])
muAML = rowMeans(X[, gol.fac=="AML"])
Y <- X
Y[, gol.fac=="ALL"] <- Y[, gol.fac=="ALL"] - matrix(muALL, m, n1, byrow=FALSE)
Y[, gol.fac=="AML"] <- Y[, gol.fac=="AML"] - matrix(muAML, m, n2, byrow=FALSE)
B = 250    # number of bootstrap samples
F.mat = matrix(nrow=B, ncol=m) # initialise matrix of bootstrapped statistics
for (b in 1:B) {
indices = sample(1:n, n, replace = TRUE)
f.test.fun = function(x) {
var.test(x ~ gol.fac, conf.level = 0.95)$statistic
}
F.mat[b, ] = apply(Y[, indices], 1, f.test.fun)
}
D = data.frame(F.mat)[,1:5]
colnames(D) = golub.gnames[1:5,3]
plot(log(D))
library(MASS)
f.hat = kde2d(log(F.mat[, 4]), log(F.mat[, 5]))
persp(f.hat, theta = 40, phi = 25, shade = 0.5, ticktype = "detailed",
xlab = golub.gnames[1, 3],
ylab = golub.gnames[2, 3],
zlab = "density estimate")
contour(f.hat, xlab = golub.gnames[1,3], ylab = golub.gnames[2,3])
c = 0.5 # initial value
alpha = 0.025 # target FWER
alpha.c = 1 # initial value for the estimated FWER
while (alpha.c > alpha) {
c =c+0.001
rs = rowSums(F.mat > c) # for each sample, count how many reject H0
alpha.c = mean(rs >= 1)
}
c # the determined critical value
c=1
alpha = 0.025
alpha.c = 1
while (alpha.c > alpha) {
c =c-0.001
ls = rowSums(F.mat < c) # for each sample, count how many reject H0
alpha.c = mean(ls >= 1)
}
c # the determined critical value
confint(lm.fit2)
confint(lm.fit)
lm.fit2 = lm(NDRM.CH ~ actn3_r577x + Gender + actn3_r577x:Gender)
anova(lm.fit, lm.fit2)
lm.fit2 = lm(NDRM.CH ~ actn3_r577x + Gender + actn3_r577x:Gender)
anova(lm.fit, lm.fit2)
plot(fitted(lm.fit2), residuals(lm.fit2))
abline(h=0, lty=2)
qqnorm(residuals(lm.fit2))
qqline(residuals(lm.fit2))
confint(lm.fit2)
confint(lm.fit)
genoDosage <- as.numeric(actn3_r577x) - 1
lm.fit  = lm(NDRM.CH ~ genoDosage + Gender)
lm.fit2 = lm(NDRM.CH ~ genoDosage + Gender + genoDosage:Gender)
summary(lm.fit)
confint(lm.fit)
plot(fitted(lm.fit2), residuals(lm.fit2))
abline(h = 0, lty = 2)
qqnorm(residuals(lm.fit2))
qqline(residuals(lm.fit2))
Fstat <- apply(X, 1, f.test.fun) sort(Fstat)
Fstat <- apply(X, 1, f.test.fun)
sort(Fstat)
knitr::opts_chunk$set(echo = TRUE)
genotypes1 <- read.table("./data/genotypes1.csv", sep=",")
genotypes1
# Study 1
genotypes1 <- read.table("./data/genotypes1.csv", sep=",")
phenotypes1 <- read.table("./data/phenotypes1.csv", sep=",")
# Study 1
genotypes1 <- read.table("./data/genotypes1.csv", sep=",")
phenotypes1 <- read.table("./data/phenotype1.csv", sep=",")
# Study 2
genotypes2 <- read.table("./data/genotypes2.csv", sep=",")
phenotypes2 <- read.table("./data/phenotype2.csv", sep=",")
# Study 3
genotypes3 <- read.table("./data/genotypes3.csv", sep=",")
class(snp10001)
length(snp10001)
library(SNPassoc)
data(SNPs)
dim(SNPs)
colnames(SNPs)
snp10001 <- SNPs$snp10001
is.numeric(snp10001)
levels(snp10001)
class(snp10001)
length(snp10001)
freq <- table(snp10001)
plot(freq)
## 2 - Functions & Loops
# contigency table construction
X <- table(SNPs$casco, SNPs$snp10001)
X
# H0 = 2 variables independent
# H1 = 2 variables dependent
myChisq <- function(Z) {
n <- sum(Z)       # sample size
out <- 0          # initialize the output
for (r in 1:2) {  # loop across rows and cols
for (c in 1:3) {
o <- Z[r, c]                        # observed
e <- sum(Z[r, ]) * sum(Z[, c]) / n  # expected
out <- out + (o - e)^2 / e          # collect the values
}
}
return(out) }
myChisq(X)
qchisq(0.95, df = 2)
chisq.test(X)
## 3 - Exploratory data analysis on microarrays
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
1:n1
?sample
qt(0.95)
qt(0.95, df=99)
qt(0.05, df=99)
qt(0.05, df=200)
qt(0.05, df=10)
knitr::opts_chunk$set(echo = TRUE)
library(genetics)
library(coin)
install.packages("coin")
knitr::opts_chunk$set(echo = TRUE)
library(multtest)
data(golub)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
y = factor(golub.cl, levels = c(0, 1), labels = c("ALL", "AML"))
x = golub[1, ] # pick the first gene
fit1 = glm(y ~ x, family = "binomial")
summary(fit1)
f = function(x) {
exp(0.7894 + 1.5203 * x) / (1 + exp(0.7894 + 1.5203 * x))
}
curve(f, -5, 5, ylab = expression(p(x)), xlab = "x")
est = coef(summary(fit1))
est
est[2, 4] # p-value for the second coefficient (i.e beta1)
f(0.7)
predict(fit1, newdata = data.frame(x = 0.7), type = "response")
predict(fit1, newdata = data.frame(x = 0.7), type = "response")
newdata1 = data.frame(x = c(-0.3, 1.2, 0.7))
newdata1
predict(fit1, newdata = newdata1, type = "response")
f(newdata1$x)
newdata1 = data.frame(x = c(-0.3, 1.2, 0.7))
predict(fit1, newdata = newdata1, type = "response")
f(newdata1$x)
newdata1 = data.frame(x = c(-0.3, 1.2, 0.7))
predict(fit1, newdata = newdata1, type = "response")
f(newdata1$x)
pvals = 1:3051
for (i in 1:3051) {
fit.i = glm(y ~ golub[i, ], family = "binomial")
pvals[i] = coef(summary(fit.i))[2, 4]
}
pvals[1:10]
testVec = 1:10
testVec
# The following sorts the p-values and returns an index with the
# positions in the original vector pvals. Then pick the first 200.
pos = sort(pvals, decreasing = FALSE, index.return = TRUE)$ix
pos = pos[1:200]
pos[1:10]
install.packages("glmnet")
library(glmnet)
X = t(golub[pos, ]) # t() transposes the input matrix
lasso.fit = glmnet(X, y, family = "binomial", alpha = 1)
plot(lasso.fit, xvar = "lambda")
names(lasso.fit) # names of data objects within the lasso fit
nvar = apply(lasso.fit$beta != 0 , 2, sum) # count the non-zero coefficients
nvar
names(lasso.fit) # names of data objects within the lasso fit
nvar = apply(lasso.fit$beta != 0 , 2, sum) # count the non-zero coefficients
nvar
lasso.var = (1:200)[lasso.fit$beta[, 7] != 0] # indicator for the relevant variables
lasso.var
cv1 = cv.glmnet(X, y, family = "binomial", alpha = 1)
cv1 = cv.glmnet(X, y, family = "binomial", alpha = 1)
cv1$lambda.min
names(cv1)
cv1$lambda
cv1
lasso.fit2 = glmnet(X, y, family = "binomial", alpha = 1, lambda = cv1$lambda.min)
lasso.fit2 = glmnet(X, y, family = "binomial", alpha = 1, lambda = cv1$lambda.min)
lasso.fit2
z1 = golub[lasso.var[1], ]
z2 = golub[lasso.var[2], ]
z3 = golub[lasso.var[3], ]
glm.lasso  = glm(y ~ z1 + z2 + z3, family = "binomial")
glm.lasso2 = glm(y ~ z1, family = "binomial")
anova(glm.lasso2, glm.lasso, test = "Chisq")
return(validIndex)
shiny::runApp('Work/Shiny_Apps/indexChecker')
isValidIndex <- function(string) {
# check that characters are only a t c g or +
# check that there is only one + in the string
# if both both conditions satisfied, return TRUE
# use regex
validIndex <- grepl("^[ACTGactg]{6,8}\\+?[ACTGactg]{0,8}$", string)
return(validIndex)
}
isValidIndex("ATCGATCG")
class(isValidIndex("ATCGATCG"))
if (!isValidIndex("ATCGATCG")) {print("Hello")}
if (!isValidIndex("ATCGAHCG")) {print("Hello")}
runApp('Work/Shiny_Apps/indexChecker')
shiny::runApp()
runApp()
runApp()
runApp('~/testApp')
runApp()
kitSets <- function(kit) {
sets <- case_when(
kit == "DNA HT Dual Index Kit" ~ c("96N Set A", "96N Set B", "96N Set C",
"96N Set D", "24N"),
kit == "Lexogen" ~ c("i7 Index Primers (7001-7096)",
"i5 Index Primers (5001-5096)",
"SRi7 Index Primers (Small RNA)")
)
return(sets)
}
kitSets("Lexogen")
runApp()
runApp()
runApp()
setwd("~/Work/Shiny_Apps/indexChecker")
lexogenTable <- function(set, direction) {
# reads in Lexogen index tables according to set and machine read direction
if (set == "i5 Index Primers (5001-5096)") {
fileLocation <- paste("data/Lexogen – ", set, " ", direction, ".csv", sep="")
} else {
fileLocation <- paste("data/Lexogen – ", set, ".csv", sep="")
}
indexTable <- read.table(fileLocation, sep=",",header=TRUE, row.names=1,
stringsAsFactors=FALSE, check.names=FALSE)
return(indexTable)
}
lexogenTable("i5 Index Primers (5001-5096)", "Reverse")
lexogenTable("i5 Index Primers (5001-5096)", "Forward")
dualIndexTable <- function(set, direction) {
# reads in HT Dual Index tables in according to set and machine read direction
fileLocation <- paste("data/DNA HT Dual Index Kit – ", set, " ", direction, ".csv", sep="")
indexTable <- read.table(fileLocation, sep=",",header=TRUE, row.names=1,
stringsAsFactors=FALSE, check.names=FALSE)
return(indexTable)
}
dualIndexTable("96N Set A", "Forward")
runApp()
shiny::runApp()
getwd()
read.table("data/Lexogen - i5 Index Primers (5001-5096) Reverse.csv")
read.table("data/Lexogen - i5 Index Primers (5001-5096) Reverse.csv", sep=",")
read.table("data/Lexogen - i5 Index Primers (5001-5096) Reverse.csv", sep=",", header=TRUE)
read.table("data/Lexogen - i5 Index Primers (5001-5096) Reverse.csv", sep=",", header=TRUE, rownames=1)
read.table("data/Lexogen - i5 Index Primers (5001-5096) Reverse.csv", sep=",", header=TRUE, row.names=1)
read.table("data/Lexogen - i5 Index Primers (5001-5096) Reverse.csv", sep=",", header=TRUE)
fileLocation <- "data/Lexogen - i5 Index Primers (5001-5096) Reverse.csv"
indexTable <- read.table(fileLocation, sep=",",header=TRUE, row.names=1,
stringsAsFactors=FALSE, check.names=FALSE)
indexTable
runApp()
runApp()
