for (r in 1:2) { # loop across rows and cols
for (c in 1:3) {
o <- Z[r, c] # observed
e <- sum(Z[r, ]) * sum(Z[, c]) / n # expected
out <- out + (o - e)^2 / e # collect the values
}
}
return(out) }
myChisq(X)
qchisq(0.95, df = 2)
chisq.test(X)
## 3 - Exploratory data analysis on microarrays
source("http://www.bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
library(multtest)
data(golub)
ncol(golub) # sample size
nrow(golub) # number of genes
golub
golub.gnames
x <- golub[1042, ] # extracts expression values
golub.gnames[1042, 3] # determines label of gene
golub.gnames
boxplot(x[golub.cl == 0], x[golub.cl == 1])
pos = 1080:1085
M = golub[pos,]
rownames(M) = golub.gnames[pos, 3]
heatmap(M)
M <- data.frame(t(M))
plot(M)
library(lattice)
levelplot(cor(M))
sum(log(1:100))
sum(log10(1:100))
?qnorm
rnorm(10000, mean=1, sd=2)
set.seed(1)
distribution = rnorm(10000, mean=1, sd=2)
mean(distribution^2)
set.seed(25)
distribution = rnorm(10000, mean=1, sd=2)
mean(distribution^2)
# q = vector of quantiles
# qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
qnorm(0.1)
qnorm(0.1, lower.tail = FALSE)
snp10001
table(snp10001)
# 3a. Explore the distribution of expression values using basic summary statistics, a histogram and a QQ-plot.
summary(golub)
hist(golub)
hist(golub.cl)
hist(golub.gnames)
hist(golub)
# 3a. Explore the distribution of expression values using basic summary statistics, a histogram and a QQ-plot.
summary(golub[1042])
summary(golub_row)
# 3a. Explore the distribution of expression values using basic summary statistics, a histogram and a QQ-plot.
golub_row = golub[1042]
summary(golub_row)
hist(golub_row)
qqplot(golub_row)
golub
# 3a. Explore the distribution of expression values using basic summary statistics, a histogram and a QQ-plot.
golub_row = golub[1042, ]
summary(golub_row)
hist(golub_row)
qqplot(golub_row)
qqnorm(golub_row)
qqnorm(golub_row)
abline(golub_row)
## 4. Based on the exploration of the 1080th to 1085th genes in the golub dataset, comment on presence and type of relationship for these genes.
golub_rows = golub[1080:1085, ]
summary(golub_rows)
hist(golub_rows)
qqnorm(golub_rows)
minor_allele_freq <- (2*conting_table[1] + conting_table[2]) / (2*sum(conting_table))
conting_table <- table(snp10001)
minor_allele_freq <- (2*conting_table[1] + conting_table[2]) / (2*sum(conting_table))
minor_allele_freq
qqnorm(golub_row)
qqline(golub_row)
boxplot(golub_row, horizontal=T, col='lightblue')
golub_0 <- golub[golub.cl == 0]
golub_1 <- golub[golub.cl == 1]
boxplot(golub ~ golub.cl, horizontal=TRUE, xlab="x", ylab="golub.cl")
golub_0 <- golub_row[golub.cl == 0]
golub_1 <- golub_row[golub.cl == 1]
boxplot(golub ~ golub.cl, horizontal=TRUE, xlab="x", ylab="golub.cl")
golub_0 <- golub_row[golub.cl == 0]
golub_1 <- golub_row[golub.cl == 1]
boxplot(golub_row ~ golub.cl, horizontal=TRUE, xlab="x", ylab="golub.cl")
boxplot(golub_row ~ golub.cl, horizontal=TRUE, xlab="x", ylab="golub.cl", col="lightblue")
hist(golub_0, golub_1)
path <- "http://www.biostat.umn.edu/~cavanr/FMS_data.txt"
fms <- read.delim(path, header = TRUE, sep = "\t")
attach(fms)
library(genetics)
install.packages("genetics")
library(genetics)
mySNP <- genotype(akt1_t10726c_t12868c, sep = "")
HWE.exact(mySNP) # Fisher's test
HWE.chisq(mySNP) # chi-squared test
mySNP
out <- HWE.exact(mySNP)
names(out)
out$p.value
names(HWE.chisq(mySNP))
names(HWE.exact(mySNP))
#[1] "statistic" "parameter" "p.value"   "method"    "data.name" "observed"  "expected" "residuals" "stdres"
chi_values$statistic
chi_values <- names(HWE.chisq(mySNP))
chi_values
#[1] "statistic" "parameter" "p.value"   "method"    "data.name" "observed"  "expected" "residuals" "stdres"
chi_values$statistic
exact_values <- names(HWE.exact(mySNP))
exact_values
#[1] "statistic" "parameter" "p.value"   "method"    "data.name" "observed"
exact_values$statsitic
#[1] "statistic" "parameter" "p.value"   "method"    "data.name" "observed"
exact_values$p.value
library(genetics)
mySNP <- genotype(akt1_t10726c_t12868c, sep = "")
HWE.exact(mySNP) # Fisher's test
HWE.chisq(mySNP) # chi-squared test
#(i) null and alternative hypotheses;
## H0 -> There is NO deviation from HWE
## H1 -> There IS a deviation from HWE
#(ii) test statistics;
chi_values <- names(HWE.chisq(mySNP))
chi_values <- HWE.chisq(mySNP)
names(chi_values)
#[1] "statistic" "parameter" "p.value"   "method"    "data.name" "observed"  "expected" "residuals" "stdres"
chi_values$statistic
exact_values <- HWE.exact(mySNP)
names(exact_values)
#[1] "statistic" "parameter" "p.value"   "method"    "data.name" "observed"
exact_values$statistic
chi_values
exact_values
#4. Carry out Fisherâ€™s test for the same SNP, but now stratify the individuals by their eth- nicity using the variable Race.
tapply(mySNP, INDEX = Race, HWE.exact)
mySNP
names(mySNP)
fms
levels(mySNP)
B <- 20 # number of SNPs
pval.seq <- 1:B
for (i in 1:B) {
mySNP <- genotype(fms[, i + 3], sep = "")
out <- HWE.exact(mySNP)
pval.seq[i] <- out$p.value
}
pval.seq
alpha <- 0.05
alpha.star <- alpha / B
alpha.star
plot(log(pval.seq))
abline(h = log(alpha.star))
abline(h = log(alpha), lty = 2)
sum(pval.seq < alpha)
sum(pval.seq < alpha.star)
knitr::opts_chunk$set(echo = TRUE)
m = nrow(golub)
library(multtest)
data(golub)
gol.factor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
var.test(golub[1,] ~ gol.factor)
n1 = sum(gol.factor == "ALL")
n2 = sum(gol.factor == "AML")
density_func = function(x) {
df(x, df1=n1-1, df2=n2-1)
}
curve(density_func, 0, 3)
# Function to return the F-test p-value
f_test_function = function(x) {
var.test(x ~ gol.factor, conf.level=0.95)$p.value
}
# How to test a single gene
f_test_function(golub[1,])
# Test for all genes
p_vals = apply(golub, 1, f_test_function)
sum(p_vals < 0.05)
m = nrow(golub)
pvals_bonferroni = p_vals * m
sum(pvals_bonferroni < 0.05)
knitr::opts_chunk$set(echo = TRUE)
m = nrow(golub)
pvals_bonferroni = p_vals * m
sum(pvals_bonferroni < 0.05)
knitr::opts_chunk$set(echo = TRUE)
m = nrow(golub)
pvals_sidek = 1 - (1 - pvals)^m
knitr::opts_chunk$set(echo = TRUE)
m = nrow(golub)
pvals_sidek = 1 - (1 - p_vals)^m
sum(pvals_sidek < 0.05)
knitr::opts_chunk$set(echo = TRUE)
library(genetics)
path = "http://www.biostat.umn.edu/~cavanr/FMS_data.txt"
fms = read.delim(path, header = TRUE, sep = "\t")
attach(fms)
lm.fit = lm(NDRM.CH ~ actn3_r577x + Gender)
summary(lm.fit)
fms$names
fms
-23.472 + c(-1, 1) * qt(0.975, df = 599) * 2.565
confint(lm.fit)
lm.fit2 = lm(NDRM.CH ~ actn3_r577x + Gender + actn3_r577x:Gender)
anova(lm.fit, lm.fit2)
knitr::opts_chunk$set(echo = TRUE)
library(multtest)
data(golub)
gol.fac = factor(golub.cl, levels = 0:1, labels = c("ALL", "AML"))
golub
golub.cl
gol.fac
var.test(golub[1, ] ~ gol.fac)
n1 = sum(gol.fac == "ALL") # sample sizes for the two groups
n2 = sum(fol.fac == "AML")
n1 = sum(gol.fac == "ALL") # sample sizes for the two groups
n2 = sum(gol.fac == "AML")
f = function(x) { # density function
df(x, df1 = n1 - 1, df2 = n2 - 1)
}
curve(f, 0, 3)
# Function to return the F-test p-value:
f.test.fun = function(x) {
var.test(x ~ gol.fac, conf.level=0.095)$p.value
}
# How to test a single gene:
f.test.fun(golub[1, ])
# Run the rest for all genes:
pvals = apply(golub, 1, f.test.fun)
sum(pvals < 0.05)
m = nrow(golub)
pvals.bonf = pvals * m
sum(pvals.bonf < 0.05)
m = nrow(golub)
pvals.sidek = 1 - ( 1 - pvals)^m
sum(pvals.sidek < 0.05)
plot(sort(pvals)[1:400], xlab="Genes forted by p-value", ylab="p-values")
abline(0, 0.05/m, lty=2, col=2) # BH
abline(h = 0.05/m, lty=3, col=3) # Bonferroni
abline(h = 1-(1-0.5)^(1/m), lty=4, col=4) # Sidek
pvals.BH = sort(pvals, decreasing = FALSE) * m / seq(1, m)
sum(pvals.BH < 0.05)
plot(sort(pvals)[1:400], xlab="Genes forted by p-value", ylab="p-values")
abline(0, 0.05/m, lty=2, col=2) # BH
abline(h = 0.05/m, lty=3, col=3) # Bonferroni
abline(h = 1-(1-0.5)^(1/m), lty=4, col=4) # Sidek
var.test(golub[1, ] ~ gol.fac)
gol.fac = factor(golub.cl, levels = 0:1, labels = c("ALL", "AML"))
table(gol.fac)
library(genetics)
library(coin)
path <- "http://www.biostat.umn.edu/~cavanr/FMS_data.txt"
fms <- read.delim(path, header = TRUE, sep = "\t")
trait <- as.numeric(fms$pre.BMI > 25)
pvals <- numeric(225)
for (i in 1:225) {
mysnp <- ordered(fms[, i + 1])
pvals[i] <- pvalue(independence_test(trait ~ mysnp)) }
# No p-value adjustment.
table(pvals < 0.05)
# Bonferroni.
table(pvals < 0.05 / 225)
# Sidek.
table(pvals < 1 - (1 - 0.05)^(1 / 225))
# Benjamini-Hochberg.
table(sort(pvals, na.last = TRUE) * 225 / (1:225) < 0.05)
table(sort(pvals) * 225 / (1:225) < 0.05)
knitr::opts_chunk$set(echo = TRUE)
library(genetics)
path = "http://www.biostat.umn.edu/~cavanr/FMS_data.txt"
fms = read.delim(path, header = TRUE, sep = "\t")
attach(fms)
lm.fit = lm(NDRM.CH ~ actn3_r577x + Gender)
summary(lm.fit)
fms
NDRM.CH
-23.472 + c(-1, 1) * qt(0.975, df = 599) * 2.565
confint(lm.fit)
lm.fit2 = lm(NDRM.CH ~ actn3_r577x + Gender + actn3_r577x:Gender)
anova(lm.fit, lm.fit2)
plot(fitted(lm.fit2), residuals(lm.fit2))
abline(h=0, lty=2)
qqnorm(residuals(lm.fit2))
qqline(residuals(lm.fit2))
library(multtest)
data(golub)
library(multtest)
data(golub)
knitr::opts_chunk$set(echo = TRUE)
gol.fac = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
n1 = summary(gol.fac)[1] # ALL
n2 = summary(gol.fac)[2] # AML
n = n1 + n2
m = 10      # number of genes to test
X = golub[1:m, ] # original data
# Center the two samples
muALL = rowmeans(X[, gol.fac=="ALL"])
gol.fac = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
n1 = summary(gol.fac)[1] # ALL
n2 = summary(gol.fac)[2] # AML
n = n1 + n2
m = 10      # number of genes to test
X = golub[1:m, ] # original data
# Center the two samples
muALL = rowMeans(X[, gol.fac=="ALL"])
muAML = rowMeans(X[, gol.fac=="AML"])
Y <- X
Y[, gol.fac=="ALL"] <- Y[, gol.fac=="ALL"] - matrix(muALL, m, n1, byrow=FALSE)
Y[, gol.fac=="AML"] <- Y[, gol.fac=="AML"] - matrix(muAML, m, n2, byrow=FALSE)
B = 250    # number of bootstrap samples
F.mat = matrix(nrow=B, ncol=m) # initialise matrix of bootstrapped statistics
for (b in 1:B) {
indices = sample(1:n, n, replace=TRUE) # indices for the bootstrapped samples
f.test.fun = function(x) {
var.test(x ~gol.fac, conf.level=0.95)$statistic
}
F.mat[b, ] = apply(Y[indices], 1, f.test.fun)
}
gol.fac = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
n1 = summary(gol.fac)[1] # ALL
n2 = summary(gol.fac)[2] # AML
n = n1 + n2
m = 10      # number of genes to test
X = golub[1:m, ] # original data
# Center the two samples
muALL = rowMeans(X[, gol.fac=="ALL"])
muAML = rowMeans(X[, gol.fac=="AML"])
Y <- X
Y[, gol.fac=="ALL"] <- Y[, gol.fac=="ALL"] - matrix(muALL, m, n1, byrow=FALSE)
Y[, gol.fac=="AML"] <- Y[, gol.fac=="AML"] - matrix(muAML, m, n2, byrow=FALSE)
B = 250    # number of bootstrap samples
F.mat = matrix(nrow=B, ncol=m) # initialise matrix of bootstrapped statistics
for (b in 1:B) {
indices = sample(1:n, n, replace = TRUE)
f.test.fun = function(x) {
var.test(x ~ gol.fac, conf.level = 0.95)$statistic
}
F.mat[b, ] = apply(Y[, indices], 1, f.test.fun)
}
F.mat
D = data.frame(F.mat)[,1:5]
colnames(D) = golub.gnames[1:5,3]
plot(log(D))
library(MASS)
f.hat = kde2d(log(F.mat[, 4]), log(F.mat[, 5]))
persp(f.hat, theta = 40, phi = 25, shade = 0.5, ticktype = "detailed",
xlab = golub.gnames[1, 3],
ylab = golub.gnames[2, 3],
zlab = "density estimate")
contour(f.hat, xlab = golub.gnames[1,3], ylab = golub.gnames[2,3])
c = 0.5 # initial value
alpha = 0.025 # target FWER
alpha.c = 1 # initial value for the estimated FWER
while (alpha.c > alpha) {
c =c+0.001
rs = rowSums(F.mat > c) # for each sample, count how many reject H0 alpha.c = mean(rs >= 1)
}
c
c = 0.5 # initial value
alpha = 0.025 # target FWER
alpha.c = 1 # initial value for the estimated FWER
while (alpha.c > alpha) {
c =c+0.001
rs = rowSums(F.mat > c) # for each sample, count how many reject H0
alpha.c = mean(rs >= 1)
}
c # the determined critical value
c=1
alpha = 0.025
alpha.c = 1
while (alpha.c > alpha) {
c =c-0.001
ls = rowSums(F.mat < c) # for each sample, count how many reject H0
alpha.c = mean(ls >= 1)
}
c # the determined critical value
?confint
confint(lm.fit2)
library(genetics)
path = "http://www.biostat.umn.edu/~cavanr/FMS_data.txt"
fms = read.delim(path, header = TRUE, sep = "\t")
attach(fms)
lm.fit = lm(NDRM.CH ~ actn3_r577x + Gender)
summary(lm.fit)
-23.472 + c(-1, 1) * qt(0.975, df = 599) * 2.565
confint(lm.fit)
plot(fitted(lm.fit2), residuals(lm.fit2))
gol.fac = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
n1 = summary(gol.fac)[1] # ALL
n2 = summary(gol.fac)[2] # AML
n = n1 + n2
m = 10      # number of genes to test
X = golub[1:m, ] # original data
# Center the two samples
muALL = rowMeans(X[, gol.fac=="ALL"])
muAML = rowMeans(X[, gol.fac=="AML"])
Y <- X
Y[, gol.fac=="ALL"] <- Y[, gol.fac=="ALL"] - matrix(muALL, m, n1, byrow=FALSE)
Y[, gol.fac=="AML"] <- Y[, gol.fac=="AML"] - matrix(muAML, m, n2, byrow=FALSE)
B = 250    # number of bootstrap samples
F.mat = matrix(nrow=B, ncol=m) # initialise matrix of bootstrapped statistics
for (b in 1:B) {
indices = sample(1:n, n, replace = TRUE)
f.test.fun = function(x) {
var.test(x ~ gol.fac, conf.level = 0.95)$statistic
}
F.mat[b, ] = apply(Y[, indices], 1, f.test.fun)
}
D = data.frame(F.mat)[,1:5]
colnames(D) = golub.gnames[1:5,3]
plot(log(D))
library(MASS)
f.hat = kde2d(log(F.mat[, 4]), log(F.mat[, 5]))
persp(f.hat, theta = 40, phi = 25, shade = 0.5, ticktype = "detailed",
xlab = golub.gnames[1, 3],
ylab = golub.gnames[2, 3],
zlab = "density estimate")
contour(f.hat, xlab = golub.gnames[1,3], ylab = golub.gnames[2,3])
c = 0.5 # initial value
alpha = 0.025 # target FWER
alpha.c = 1 # initial value for the estimated FWER
while (alpha.c > alpha) {
c =c+0.001
rs = rowSums(F.mat > c) # for each sample, count how many reject H0
alpha.c = mean(rs >= 1)
}
c # the determined critical value
c=1
alpha = 0.025
alpha.c = 1
while (alpha.c > alpha) {
c =c-0.001
ls = rowSums(F.mat < c) # for each sample, count how many reject H0
alpha.c = mean(ls >= 1)
}
c # the determined critical value
confint(lm.fit2)
confint(lm.fit)
lm.fit2 = lm(NDRM.CH ~ actn3_r577x + Gender + actn3_r577x:Gender)
anova(lm.fit, lm.fit2)
lm.fit2 = lm(NDRM.CH ~ actn3_r577x + Gender + actn3_r577x:Gender)
anova(lm.fit, lm.fit2)
plot(fitted(lm.fit2), residuals(lm.fit2))
abline(h=0, lty=2)
qqnorm(residuals(lm.fit2))
qqline(residuals(lm.fit2))
confint(lm.fit2)
confint(lm.fit)
genoDosage <- as.numeric(actn3_r577x) - 1
lm.fit  = lm(NDRM.CH ~ genoDosage + Gender)
lm.fit2 = lm(NDRM.CH ~ genoDosage + Gender + genoDosage:Gender)
summary(lm.fit)
confint(lm.fit)
plot(fitted(lm.fit2), residuals(lm.fit2))
abline(h = 0, lty = 2)
qqnorm(residuals(lm.fit2))
qqline(residuals(lm.fit2))
Fstat <- apply(X, 1, f.test.fun) sort(Fstat)
Fstat <- apply(X, 1, f.test.fun)
sort(Fstat)
shiny::runApp('Work/Shiny_Apps/indexChecker')
runApp('~/Dropbox/Work/R apps')
runApp('Work/Shiny_Apps/indexChecker')
runApp('Dropbox/Work/R apps')
runApp('Work/Shiny_Apps/indexChecker')
runApp('Dropbox/Work/R apps')
runApp('Work/Shiny_Apps/indexChecker')
runApp('Dropbox/Work/R apps/learn_shiny.R/learn_shiny.R')
runApp('Work/Shiny_Apps/indexChecker')
runApp('Dropbox/Work/R apps')
runApp('Work/Shiny_Apps/indexChecker')
?hr
?hr
runApp('Work/Shiny_Apps/indexChecker')
rows = c("A", "B", "C", "D", "E", "F", "G", "H")
data.frame([1:16]=rep(TRUE, 8), row.names=rows)
y <- data.frame()
colnames(y) <- [1:16]
plate = data.frame(matrix(ncol=16, nrow=8), row.names=rows)
plate
seq(1, 10)
plate = data.frame(seq(1, 16)=rep(FALSE, 8), row.names=rows)
plate
colnames(plate) <- seq(1, 16)
plate
rows = c("A", "B", "C", "D", "E", "F", "G", "H")
plate = data.frame(seq(1, 16)=rep(FALSE, 8), row.names=rows)
colnames(plate) <- seq(1, 16)
plates[is.na(plate)] = FALSE
return(plate)
rows = c("A", "B", "C", "D", "E", "F", "G", "H")
plate = data.frame(seq(1, 16)=rep(FALSE, 8), row.names=rows)
colnames(plate) <- seq(1, 16)
plate[is.na(plate)] = FALSE
plate
rows = c("A", "B", "C", "D", "E", "F", "G", "H")
plate = data.frame(seq(1, 16), row.names=rows)
colnames(plate) <- seq(1, 16)
plate[is.na(plate)] = FALSE
rows = c("A", "B", "C", "D", "E", "F", "G", "H")
plate = data.frame(matrix(ncol=16, nrow=8), row.names=rows)
colnames(plate) <- seq(1, 16)
plate[is.na(plate)] = FALSE
plate
runApp('Work/Shiny_Apps/indexChecker')
